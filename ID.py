# -*- coding: utf-8 -*-
"""
Inverse Dynamics: calculates joint torques required to produce joint angles 
over time generated by IK 
@author: Jack Vincent
"""

import numpy as np
from scipy.interpolate import interp1d
from scipy.misc import derivative

import model

# load in model and experiment
current_model = model.load('upper_arm_0')
current_experiment = model.load('8-17-20')

t = current_experiment.t

# creates interpolation function that can be called to determine the joint 
# angles at any time point within the recorded range, even time points that 
# were not explicitly calculated
for joint_data in current_experiment.joints:
    angle = joint_data.angle
    joint_data.angle_interp = interp1d(t, angle, kind='cubic', fill_value='extrapolate')

# iterate joint by joint
for joint_data in current_experiment.joints:
    velocity = []
    for time in t:
        vel = derivative(joint_data.angle_interp, time, n=1)
        velocity.append(vel)
    joint_data.velocity = velocity
    
# iterate joint by joint
for joint_data in current_experiment.joints:
    acceleration = []
    for time in t:
        accel = derivative(joint_data.angle_interp, time, n=2)
        acceleration.append(accel)
    joint_data.acceleration = acceleration
    
for joint_data in current_experiment.joints:
    joint_data.torque = []
    
for time in t:
    torques = current_experiment.return_torques(time)
    for i, joint_data in enumerate(current_experiment.joints):
        joint_data.torque.append(torques[i])
    
# write finished results
current_model.dump()
current_experiment.dump()
    